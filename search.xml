<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/08/hello_world/</url>
    <content><![CDATA[<h2 id="开始尝试静态博客"><a href="#开始尝试静态博客" class="headerlink" title="开始尝试静态博客"></a>开始尝试静态博客</h2>]]></content>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>打卡</title>
    <url>/2022/01/14/%E6%89%93%E5%8D%A1/%E6%89%93%E5%8D%A1/</url>
    <content><![CDATA[<h2 id="2022-01-14"><a href="#2022-01-14" class="headerlink" title="2022-01-14"></a>2022-01-14</h2><ol>
<li><p>acwing 算法基础课</p>
<ul>
<li><p>DFS: 栈, 空间和路径长度相关</p>
<ul>
<li>数字的全排列，只有单纯的回溯, 没有剪枝， 现场的恢复</li>
<li>n皇后问题：将相同对角线映射到一个下标, 对应题解的第一种</li>
</ul>
</li>
<li><p>BFS: queue, 空间是指数级别的， 可以搜索最近的点</p>
<ul>
<li>走迷宫</li>
<li>八数码： <ol>
<li>状态本身是一个二维数组, 表示比较复杂, </li>
<li>dist的表示相对来说也比较复杂,  距离数组的下标表示也比较复杂</li>
<li>状态的转移也需要进行考虑</li>
<li>注意下bfs的最短路径的数学证明</li>
</ol>
</li>
</ul>
</li>
<li><p>树和图的存储</p>
<ul>
<li>树是无环连通图</li>
<li>有向图存储<ul>
<li>邻接矩阵</li>
<li>邻接表：稀疏的图</li>
</ul>
</li>
</ul>
</li>
<li><p>树与图的深度优先遍历</p>
<ul>
<li>树的重心</li>
</ul>
</li>
<li><p>树和图的宽度优先遍历</p>
<ul>
<li>树的层次</li>
<li>求解图的拓扑排序</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="2022-01-15"><a href="#2022-01-15" class="headerlink" title="2022-01-15"></a>2022-01-15</h2><ol>
<li><p>acwing 算法基础课</p>
<ul>
<li><p>最短路算法</p>
<ul>
<li><p>单源最短路</p>
<ul>
<li><p>所有边的权都是正数</p>
<ol>
<li><p>朴素的Dijkstra算法 O(n * n)<br> 稠密图用朴素的比较合适<br> go 使用0x3f3f3f3f 设置无穷大</p>
</li>
<li><p>堆优化的Dijkstra算法 O(m * log n)<br> m 是边的数量<br> 存储方式变成临接表</p>
</li>
</ol>
</li>
<li><p>存在负权边</p>
<ol>
<li>Bellman-Ford (O nm)<br> n 次迭代, 每次循环所有边，a, b, w<br> 边的存储更加随意，只要能遍历到所有边即可<ul>
<li>有边数限制的最短路径</li>
<li>可以判断负环</li>
</ul>
</li>
<li>SPFA (O m), 最坏是O nm<ul>
<li>spfa要求不能包含负环</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>多源汇最短</p>
<ul>
<li>Floyd O (n**3)<br>  原理是基于动态规划<br>  d[k, i, j] i到j只经过1..k的最短距离<br>  邻接矩阵存储图</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="2022-01-17"><a href="#2022-01-17" class="headerlink" title="2022-01-17"></a>2022-01-17</h2><ol>
<li><p>acwing 算法基础课</p>
<ul>
<li><p>最小生成树</p>
<ol>
<li><p>Prim 算法</p>
<ul>
<li><p>朴素版Prime(O n^2)<br>  稠密图<br>  更新其他点到集合的距离, 而不是到起点的距离, 这是和dijkstra的差异</p>
</li>
<li><p>堆优化的Prime(O mlogn)<br>  稀疏图</p>
</li>
</ul>
</li>
<li><p>Kruskal 算法(O m logm)</p>
<ul>
<li>将所有边按照权重从小到大排序</li>
<li>枚举每条边a, b 权重是c， 如果a和b不连通， 将这条边加入集合</li>
</ul>
</li>
</ol>
</li>
<li><p>二分图</p>
<ol>
<li>二分图的判别(染色法, 深度优先遍历)<ul>
<li>一个图是二分图, 当且仅当图中不包含奇数环</li>
<li>这是个充分必要条件, 必要性是反证法，充分性是构造, 也就是染色法</li>
</ul>
</li>
<li>匈牙利算法(最坏O(nm), 实际运行时间一般远小于， 证明相对来说比较困难)<ul>
<li>给定二分图, 求解最大匹配, 匹配是只每对点最多可以属于一条边</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="2022-01-22"><a href="#2022-01-22" class="headerlink" title="2022-01-22"></a>2022-01-22</h2><ol>
<li><p>acwing 算法基础课</p>
<ol>
<li><p>数论</p>
<ol>
<li><p>质数: 从2开始的, 如果只包含1和自身两个约数, 是质数</p>
<ul>
<li>从2开始计算约数（试除法）<ul>
<li>枚举到$\sqrt{n}$(因为约数是成对出现的, 枚举小的约数)（推荐写法 i &lt; $\frac{n}{i}$）</li>
</ul>
</li>
<li>分解质因数(试除法)<ul>
<li>从小到大尝试n的所有质因数</li>
</ul>
</li>
<li>筛选质因数<ul>
<li>线性筛法： n只会被最小的质因子筛除, 视频是讲清楚的</li>
<li>埃氏筛法</li>
</ul>
</li>
</ul>
</li>
<li><p>约数</p>
<ul>
<li>求一个数的所有约数（试除法, 约数也是成对出现, 枚举小的可以直接算大的）</li>
<li>约数的个数以及约数之和<br>  <img src="http://img.trueabc.top/img/20220119162131.png"><br>  – 约数之和<br>  <img src="http://img.trueabc.top/img/20220119163315.png"></li>
<li>最大公约数，欧几里得算法（辗转相除法）<br>  最大公约数转换<br>  <img src="http://img.trueabc.top/img/20220119190415.png"></li>
</ul>
</li>
<li><p>欧拉函数</p>
<ul>
<li>1到n中，和n互质(最大公约数是1)的数的个数<br><img src="http://img.trueabc.top/img/20220119200953.png"> <ul>
<li>从1到N中，去掉N质因子分解的倍数, </li>
<li>加上所有p_i * p_j 的倍数</li>
</ul>
</li>
<li>筛法求欧拉函数</li>
</ul>
</li>
<li><p>快速幂<br> 快速计算a的k次方mod p 的结果 O(log k)</p>
</li>
<li><p>扩展欧几里德算法</p>
<ul>
<li>该算法就是计算这里的x和y<br>  <img src="http://img.trueabc.top/img/20220122151620.png"></li>
<li>线性同余方程</li>
</ul>
</li>
<li><p>中国剩余定理 线性同余方程组的解</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>打卡</tag>
      </tags>
  </entry>
</search>
